- When would you want to create a remote repository rather than keeping all your work local?

When I want to keep my work safe in an cloud and for online collaborating. Also, to modify or create new files online, if I do not have my computer near to me.

- Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because sometimes it can not be a logical change in the code and some errors can occur if part of the code is not putting complete in the remote repository.

- Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a copy of a repository online in Github, that remains a link to the original repository without modifying it. I can use it when I do not have access to modifying a repository directly, so I can copy it directly on Github an can apply my refactory code without modifying the original.

A clone is a copy of a repository from Github to my local machine or from my local machine to another directory of my local machine. I can use it when I want to copy my online repository to my local machine to modify it, or when I want to copy the repository to another location on my computer without making a branch and without damaged the original.

A branch is a new modified version of my work with a new feature or for experiments to the code. I can use this when I want to improve the work or add a new feature and in the future I can easy add it to the original work using merge command.

- What is the benefit of having a copy of the last known state of the remote stored locally?

That it can generate less problems in the future to merge the changes in the remote repository using fetch command, with the colaboration online for another team member.

- How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I can collaborate copying the files to my local machine, modifying them and then send to my partners to merge all the changes 'manually', so the process would be harder than using Git or GitHub, because everybody have to know what files they changed and how the others changed too.

- When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When I make changes in a separate branch, I can modify the files and experiments with them without the risk of cause damage to the original work, that it not contains strange bugs or crashed. I can create more feature or a new specialized version of the work. If a want those changes in the master branch, I have to merge both, and sometimes it can be complicated if two files have conflicts. In this case, I have to merge manually and in some cases to decide what changes I want in the final version.

When I make the changes directly on master branch, I do not have to merge anything and the process can be more fast and less annoying.